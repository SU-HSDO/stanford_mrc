<?php

/**
 * @file
 * mrc_media.module
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\editor\Entity\Editor;
use Drupal\mrc_media\Form\EntityEmbedDialog;
use Drupal\Core\Entity\EntityInterface;
use Drupal\file\Entity\File;
use Drupal\mrc_media\Plugin\EntityBrowser\Widget\DropzoneUpload;

/**
 * Implements hook_entity_insert().
 */
function mrc_media_entity_insert(EntityInterface $entity) {
  if ($entity instanceof File) {
//    ddl($entity);
    //    if (empty($entity->get('source'))) {
    //      return;
    //    }

    //    $extension = pathinfo($entity->getFileUri(), PATHINFO_EXTENSION);
    //    $media_type = $this->entityTypeManager
    //      ->getStorage('media_type')
    //      ->load('image');
    //
    //    ddl($media_type);
    //    ddl($media_type->getSource());
    //
    //    $media_entity = \Drupal::entityTypeManager()->getStorage('media')
    //      ->create([
    //        'bundle' => $media_type->id(),
    //        $media_type->getSource()
    //          ->getConfiguration()['source_field'] => $entity,
    //        'uid' => \Drupal::currentUser()->id(),
    //        'status' => TRUE,
    //        'type' => $media_type->getSource()->getPluginId(),
    //      ]);
    //
    //    $source_field = $media_entity->getSource()
    //      ->getConfiguration()['source_field'];
    //    // If we don't save file at this point Media entity creates another file
    //    // entity with same uri for the thumbnail. That should probably be fixed
    //    // in Media entity, but this workaround should work for now.
    //    $media_entity->$source_field->entity->save();
    //    $media_entity->save();
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function mrc_media_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if (isset($element['#type']) && $element['#type'] == 'managed_file') {
    $element['#element_validate'][] = [DropzoneUpload::class, 'saveFileManaged'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds Linkit support for the link field in the entity embed dialog.
 */
function mrc_media_form_entity_embed_dialog_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['attributes']['data-entity-embed-display-settings'])) {
    $editor = $form_state->getBuildInfo()['args'][0];
    if ($editor instanceof Editor) {
      \Drupal::classResolver()
        ->getInstanceFromDefinition(EntityEmbedDialog::class)
        ->alterForm($form, $form_state);
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function mrc_media_theme_registry_alter(&$theme_registry) {
  // Register the path to the template file and add an additional variable to
  // image_formatter for link attributes.
  $path = drupal_get_path('module', 'mrc_media') . '/templates';
  $theme_registry['image_formatter']['path'] = $path;
  $theme_registry['image_formatter']['variables']['attributes'] = NULL;
  $theme_registry['entity_embed_container']['path'] = $path;
  $theme_registry['media']['path'] = $path;
}

/**
 * Implements hook_entity_embed_alter().
 */
function mrc_media_entity_embed_alter(array &$build, EntityInterface $entity, array &$context) {
  $build['entity']['#display_settings'] = $context['data-entity-embed-display-settings'];
  $build['entity']['#pre_render'][] = [EntityEmbedDialog::class, 'preRender'];
}
