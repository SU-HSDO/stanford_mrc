<?php

/**
 * @file
 * mrc_ds_blocks.module
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\field_ui\Form\EntityDisplayFormBase;
use Drupal\Core\Entity\EntityDisplayBase;
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\EntityInterface;
use Drupal\mrc_ds_blocks\MrcDsBlocks;

/**
 * Implements hook_entity_view_alter().
 */
function mrc_ds_blocks_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $context = [
    'entity_type' => $display->getTargetEntityTypeId(),
    'bundle' => $entity->bundle(),
    'entity' => $entity,
    'display_context' => 'view',
    'mode' => $display->getMode(),
  ];

  mrc_ds_blocks_attach_groups($build, $context);
}

function mrc_ds_blocks_attach_groups(&$element, $context) {
  /** @var \Drupal\Core\Block\BlockManager $block_manager */
  $block_manager = \Drupal::service('plugin.manager.block');

  $entity_type = $context['entity_type'];
  $bundle = $context['bundle'];
  $mode = $context['mode'];
  $display_context = $context['display_context'];

  $blocks = mrc_ds_blocks_get_blocks($entity_type, $bundle, $display_context, $mode);

  foreach ($blocks as $block_id => $block) {
    if (!$block_manager->hasDefinition($block_id)) {
      continue;
    }

    $block_instance = $block_manager->createInstance($block_id);
    $element[$block_id] = $block_instance->build();
    $element[$block_id]['#weight'] = $block->weight;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mrc_ds_blocks_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Only start altering the form if we need to.
  if (empty($form['#fields']) && empty($form['#extra'])) {
    return;
  }

  $callback_object = $form_state->getBuildInfo()['callback_object'];
  if (!$callback_object instanceof EntityDisplayFormBase) {
    throw new InvalidArgumentException('Unkown callback object.');
  }

  $display = $callback_object->getEntity();

  $params = mrc_ds_blocks_field_ui_form_params($form, $display);

  $table = &$form['fields'];
  $blocks = \Drupal::service('plugin.manager.block')->getDefinitions();

  $form['#mrc_ds_blocks'] = array_keys($params->groups);

  foreach ($params->groups as $block_id => $block) {
    $table[$block_id] = [
      '#attributes' => [
        'class' => ['draggable', 'field-group'],
        'id' => $block_id,
      ],
      '#row_type' => 'group',
      '#region_callback' => $params->region_callback,
      '#js_settings' => ['rowHandler' => 'group'],
      'human_name' => [
        '#markup' => Html::escape($blocks[$block_id]['admin_label']),
        '#prefix' => '<span class="group-label">',
        '#suffix' => '</span>',
      ],
      'weight' => [
        '#type' => 'textfield',
        '#default_value' => $block->weight,
        '#size' => 3,
        '#attributes' => ['class' => ['field-weight']],
      ],
      'parent_wrapper' => [
        'parent' => [
          '#type' => 'select',
          '#options' => [],
          '#empty_value' => '',
          '#default_value' => isset($params->parents[$block_id]) ? $params->parents[$block_id] : '',
          '#attributes' => ['class' => ['field-parent']],
          '#parents' => ['fields', $block_id, 'parent'],
        ],
        'hidden_name' => [
          '#type' => 'hidden',
          '#default_value' => $block_id,
          '#attributes' => ['class' => ['field-name']],
        ],
      ],
      'spacer' => [
        '#markup' => '&nbsp;',
      ],
      'format' => [
        'type' => [
          '#type' => 'select',
          '#options' => [],
          //          '#default_value' => $group->format_type,
          '#attributes' => ['class' => ['field-group-type']],
        ],
      ],
      'settings_summary' => ['#markup' => ''],
      //      'settings_edit' => [
      //        '#type' => 'image_button',
      //        '#name' => $block_id . '_group_settings_edit',
      //        '#src' => 'core/misc/icons/787878/cog.svg',
      //        '#attributes' => [
      //          'class' => ['field-plugin-settings-edit'],
      //          'alt' => t('Edit'),
      //        ],
      //        '#op' => 'edit',
      //        // Do not check errors for the 'Edit' button, but make sure we get
      //        // the value of the 'plugin type' select.
      //        '#limit_validation_errors' => [['fields', $block_id, 'type']],
      //        '#prefix' => '<div class="field-plugin-settings-edit-wrapper">',
      //        '#suffix' => '</div>',
      //      ],
    ];

    $block->blockId = $block_id;
    $delete_route = MrcDsBlocks::getDeleteRoute($block);
    kint($delete_route);
    $table[$block_id]['settings_edit'] = ['#markup' => Drupal::l(t('delete'), $delete_route)];
    //    $table[$block_id]['settings_edit']['#suffix'] .= Drupal::l(t('delete'), $delete_route);
  }

  array_unshift($form['actions']['submit']['#submit'], 'mrc_ds_blocks_field_overview_submit');
}

/**
 * Submit handler for the overview screens.
 *
 * @param Array $form The complete form.
 * @param FormStateInterface $form_state The state of the form.
 */
function mrc_ds_blocks_field_overview_submit($form, FormStateInterface $form_state) {
  $form_values = $form_state->getValue('fields');

  /**
   * @var \Drupal\Core\Entity\EntityDisplayBase $display
   */
  $display = $form['#context'];

  $entity_type = $display->get('targetEntityType');
  $bundle = $display->get('bundle');
  $mode = $display->get('mode');
  $context = mrc_ds_blocks_get_context_from_display($display);

  // Collect children.
  $children = array_fill_keys($form['#mrc_ds_blocks'], []);
  foreach ($form_values as $name => $value) {
    if (!empty($value['parent'])) {
      $children[$value['parent']][$name] = $name;
    }
  }

  // Update existing groups.
  $groups = mrc_ds_blocks_get_blocks($entity_type, $bundle, $context, $mode);

  foreach ($form['#mrc_ds_blocks'] as $group_name) {

    // Only save updated groups.
    if (!isset($groups[$group_name])) {
      continue;
    }

    $group = $groups[$group_name];
    $group->children = array_keys($children[$group_name]);
    $group->parent_name = $form_values[$group_name]['parent'];
    $group->weight = $form_values[$group_name]['weight'];

    /** @var EntityFormInterface $entity_form */
    $entity_form = $form_state->getFormObject();

    /** @var EntityDisplayInterface $display */
    $display = $entity_form->getEntity();

    $group->blockId = $group_name;
    mrc_ds_blocks_save($group, $display);
  }
}

/**
 * Saves a group definition.
 *
 * This function is called by ctools export when calls are made through
 * ctools_export_crud_save(). It's also used as an api method to add groups
 * to a display.
 *
 * @param \stdClass $block
 *   A group definition.
 * @param \Drupal\Core\Entity\Display\EntityDisplayInterface $display
 *   The display to update if known.
 *
 * @return \Drupal\Core\Entity\Display\EntityDisplayInterface|NULL
 *   The updated entity display.
 */
function mrc_ds_blocks_save($block, $display = NULL) {
  if ($display === NULL) {
    $display = EntityViewDisplay::load($block->entity_type . '.' . $block->bundle . '.' . $block->mode);
  }

  // If no display was found. It doesn't exist yet, create it.
  if (!isset($display)) {
    $display = EntityViewDisplay::create([
      'targetEntityType' => $block->entity_type,
      'bundle' => $block->bundle,
      'mode' => $block->mode,
    ])->setStatus(TRUE);
  }

  if (isset($display)) {
    $data = (array) $block;
    unset($data['blockId'], $data['entity_type'], $data['bundle'], $data['mode'], $data['form'], $data['context']);
    $display->setThirdPartySetting('mrc_ds_blocks', $block->blockId, $data);
    $display->save();
  }

  return $display;
}

/**
 * Helper function to get the form parameters to use while
 * building the fields and display overview form.
 *
 * @param $form
 *
 * @param \Drupal\Core\Entity\EntityDisplayBase $display
 *
 * @return \stdClass
 */
function mrc_ds_blocks_field_ui_form_params($form, EntityDisplayBase $display) {

  $params = new stdClass();
  $params->entity_type = $display->getTargetEntityTypeId();
  $params->bundle = $display->getTargetBundle();
  //  $params->region_callback = 'field_group_display_overview_row_region';
  $params->region_callback = '';
  $params->mode = $display->getMode();
  $params->context = mrc_ds_blocks_get_context_from_display($display);

  $params->groups = [];
  $params->groups = mrc_ds_blocks_get_blocks($params->entity_type, $params->bundle, $params->context, $params->mode);

  // Gather parenting data.
  $params->parents = [];
  foreach ($params->groups as $name => $group) {
    foreach ($group->children as $child) {
      $params->parents[$child] = $name;
    }
  }

  return $params;
}

/**
 * Loads a group definition.
 *
 * @param $block_id
 *   The name of the group.
 * @param $entity_type
 *   The name of the entity.
 * @param $bundle
 *   The name of the bundle.
 * @param $context
 *   The context of the view mode (form or view)
 * @param $mode
 *   The view mode to load.
 *
 * @return null|object
 */
function mrc_ds_blocks_load_block($block_id, $entity_type, $bundle, $context, $mode) {
  $blocks = mrc_ds_blocks_get_blocks($entity_type, $bundle, $context, $mode);
  if (isset($blocks[$block_id])) {
    return $blocks[$block_id];
  }
  return NULL;
}

/**
 * Helper function to get context from entity display.
 *
 * @param \Drupal\Core\Entity\EntityDisplayBase $display
 *
 * @return string
 */
function mrc_ds_blocks_get_context_from_display(EntityDisplayBase $display) {
  if ($display instanceof EntityFormDisplayInterface) {
    return 'form';
  }
  elseif ($display instanceof EntityViewDisplayInterface) {
    return 'view';
  }

  throw new LogicException('Unknown display object.');
}

/**
 * Get all groups.
 *
 * @param $entity_type
 *   The name of the entity.
 * @param $bundle
 *   The name of the bundle.
 * @param $context
 *   The context of the view mode (form or view)
 * @param $mode
 *   The view mode.
 *
 * @return array
 *   Array of blocks.
 */
function mrc_ds_blocks_get_blocks($entity_type, $bundle, $context, $mode) {
  if ($context == 'form') {
    return [];
  }
  if ($context == 'view') {
    $display = EntityViewDisplay::load($entity_type . '.' . $bundle . '.' . $mode);
    if (!$display) {
      return [];
    }
    $data = $display->getThirdPartySettings('mrc_ds_blocks');
  }

  $groups = [];
  if (isset($data) && is_array($data)) {
    foreach ($data as $group_name => $definition) {
      $definition += [
        'entity_type' => $entity_type,
        'bundle' => $bundle,
        'context' => $context,
        'mode' => $mode,
      ];
      $groups[$group_name] = (object) $definition;
    }
  }
  return $groups;
}

function mrc_ds_blocks_delete_block($block) {
  $display = EntityViewDisplay::load($block->entity_type . '.' . $block->bundle . '.' . $block->mode);

  /**
   * @var $display \Drupal\Core\Entity\Display\EntityDisplayInterface
   */
  if (isset($display)) {
    $display->unsetThirdPartySetting('mrc_ds_blocks', $block->blockId);
    $display->save();
  }
}
