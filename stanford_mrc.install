<?php

/**
 * @file
 * stanford_mrc.install
 */

use Drupal\user\Entity\User;
use Drupal\user\RoleInterface;
use Drupal\shortcut\Entity\Shortcut;
use Drupal\Core\Config\FileStorage;

/**
 * Implements hook_install().
 */
function stanford_mrc_install() {
  // Assign user 1 the "administrator" role.
  $user = User::load(1);
  $user->roles[] = 'administrator';
  $user->save();

  // We install some menu links, so we have to rebuild the router, to ensure the
  // menu links are valid.
  \Drupal::service('router.builder')->rebuildIfNeeded();

  // Allow authenticated users to use shortcuts.
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['access shortcuts']);

  // Populate the default shortcut set.
  $shortcut = Shortcut::create([
    'shortcut_set' => 'default',
    'title' => t('Add content'),
    'weight' => -20,
    'link' => ['uri' => 'internal:/node/add'],
  ]);
  $shortcut->save();

  $shortcut = Shortcut::create([
    'shortcut_set' => 'default',
    'title' => t('All content'),
    'weight' => -19,
    'link' => ['uri' => 'internal:/admin/content'],
  ]);
  $shortcut->save();

  // Allow all users to use search.
  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, ['search content']);
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['search content']);
}

/**
 * Run after installation to force the configs to re-save.
 */
function stanford_mrc_after_install() {
  stanford_mrc_update_configs(TRUE, 'all');
}

/**
 * Read from the file and re-save the configuration entities.
 *
 * @param bool $create_missing
 *   Create all missing configs in addition to the configs defined in $configs.
 * @param array|string $configs
 *   Array of config names to update, string "all" to import all.
 */
function stanford_mrc_update_configs($create_missing = TRUE, $configs = []) {
  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $path = drupal_get_path('profile', 'stanford_mrc') . '/config/install';
  $source = new FileStorage($path);

  // If configs is all, grab all available configs in the profile.
  if (is_string($configs) && $configs = 'all') {
    $configs = $source->listAll();
  }
  elseif ($create_missing) {
    // Merge missing configs with the specific configs.
    $missing_configs = array_diff($source->listAll(), $active_storage->listAll());
    $configs = array_unique(array_merge($configs, $missing_configs));
  }

  foreach ($configs as $config) {
    // Write new configs.
    if (!$active_storage->exists($config)) {
      $active_storage->write($config, $source->read($config));
      continue;
    }

    /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
    $config_factory = \Drupal::configFactory();
    /** @var \Drupal\Core\Config\Config $config_entity */
    $config_entity = $config_factory->getEditable($config);

    // Read from config file.
    $updated_config = $source->read($config);
    unset($updated_config['uuid']);

    // Make sure there is a UUID on the config.
    if (!$uuid = $config_entity->get('uuid')) {
      $uuid_service = \Drupal::service('uuid');
      $uuid = $uuid_service->generate();
    }
    $updated_config = ['uuid' => $uuid] + $updated_config;

    // Set and save the data.
    $config_entity->setData($updated_config);
    $config_entity->save();

  }
}

/**
 * Creates missing text format.
 */
function stanford_mrc_update_8001() {
  stanford_mrc_update_configs(TRUE, 'all');
}
